#!/usr/bin/env nix-shell
#!nix-shell -i bash -p bash

usage() {
	echo "Usage: $0 [-u] [-c channel] {{-p package}} {{-P package}} [command..]"
	exit 2
}

check_pkg_exists() {
	expr="import <$1> {} ? $2"
	exists=$(nix-instantiate --no-gc-warning --eval -E "$expr")
	if [ "$exists" != "true" ]; then
		echo "package $1 does not exist"
		exit 2
	fi
}

PKG_EXPR="{ nixos = import <nixos> {}; nixos-unstable = import <nixos-unstable> {}; }"
shell_expr() {
	cat << EOF
 with $PKG_EXPR; nixos.stdenvNoCC.mkDerivation {
 	name = "nix-run";
	buildInputs = [ $PACKAGES ];
}
EOF
}

CHANNEL="nixos"
PACKAGES=""
while getopts 'c:up:P:' c; do
	case $c in
		c) CHANNEL="$OPTARG" ;;
		u) CHANNEL="nixos-unstable" ;;
		p) check_pkg_exists "$CHANNEL" "$OPTARG"; PACKAGES="$PACKAGES $CHANNEL.$OPTARG" ;;
		P) check_pkg_exists "nixos-unstable" "$OPTARG"; PACKAGES="$PACKAGES nixos-unstable.$OPTARG" ;;
		h|?) usage ;;
	esac
done

PACKAGES=${PACKAGES## }

# remove values parsed with getopts
shift $((OPTIND-1))

cmd=
for arg in "$@"; do
	cmd="$cmd ${arg@Q}"
done


# no command specified, execute first binary in first package
if [ "x$cmd" == "x" ]; then
	if [ "x$PACKAGES" == "x" ]; then
		usage
	fi

	pkg=${PACKAGES%% *}
	expr="$PKG_EXPR.$pkg"
	path=$(nix-instantiate --no-gc-warning -E "$expr")
	out=$(nix-store --no-gc-warning -r $path)

	bin=${pkg##*.}
	if [ -f "$out/bin/$bin" ]; then
		exec nix-shell -E "$(shell_expr)" --command "$out/bin/$bin"

	elif [ -d "$out/bin" ]; then
		for f in $out/bin/*; do
			exec nix-shell -E "$(shell_expr)" --command "$f"
		done
	fi

	# TODO: find a way to execute .desktop files

	echo "can't find anything to run in package $pkg"
	exit 2
fi

# no packages were provided
if [ "x$PACKAGES" == "x" ]; then
	cmd_pkg=$1
	if (check_pkg_exists $CHANNEL $cmd_pkg &>/dev/null); then
		# check if package with the name of command exists, use it
		PACKAGES="$CHANNEL.$cmd_pkg"
	else
		# if not, search for a package that provides it
		matches=$(command-not-found $cmd_pkg 2>&1 | tail +3 | cut -d. -f2-)
		count=$(echo -n "$matches" | grep -c '^')

		# couldn't find any
		if [ $count -eq 0 ]; then
			echo "no packages found that provide command $cmd_pkg"
			exit 2
		fi

		# found more than one package, user has to specify which one to use
		if [ $count -gt 1 ]; then
			echo "more than one package provides command $cmd_pkg, please choose one:"
			echo "$matches" | while read opt; do
				echo -e "\t$opt"
			done
			exit 2
		fi

		PACKAGES="$CHANNEL.$matches"
	fi

fi

exec nix-shell -E "$(shell_expr)" --command "$cmd"